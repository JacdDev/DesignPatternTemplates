using System;

namespace ${namespace}
{
    /// <summary>
    /// Decorator Design Pattern Template
    /// </summary>
    class Main
    {
        /// <summary>
        /// Example of pattern use
        /// </summary> 
        public void Run()
        {
            ConcreteComponent c = new ConcreteComponent();
            ConcreteDecoratorA d1 = new ConcreteDecoratorA();
            ConcreteDecoratorB d2 = new ConcreteDecoratorB();

            d1.SetComponent(c);
            d2.SetComponent(d1);

            d2.Operation();
        }
    }

    /// <summary>
    /// Component abstract class
    /// Put here all the members your components and decorators must define
    /// </summary>
    public abstract class Component
    {
        public abstract void Operation();
    }

    /// <summary>
    /// ConcreteComponent class
    /// This is the base class to be decorated
    /// </summary>
    public class ConcreteComponent : Component
    {
        public override void Operation()
        {
            Console.WriteLine("Concrete component operation performed");
        }
    }

    /// <summary>
    /// Decorator abstract class
    /// Put here all the members your decorators must define
    /// </summary>
    public abstract class Decorator : Component
    {
        protected Component component;

        public void SetComponent(Component component)
        {
            this.component = component;
        }

        public override void Operation()
        {
            if (component != null)
            {
                component.Operation();
            }
        }
    }

    /// <summary>
    /// ConcreteDecorator A class
    /// Define all the members of the decorator, will be attached to a component
    /// </summary>
    public class ConcreteDecoratorA : Decorator
    {
        public override void Operation()
        {
            base.Operation();
            Console.WriteLine("Concrete decorator A operation performed");
        }
    }

    /// <summary>
    /// ConcreteDecorator B class
    /// Define all the members of the decorator, will be attached to a component
    /// </summary>
    public class ConcreteDecoratorB : Decorator
    {
        public override void Operation()
        {
            base.Operation();
            AddedBehavior();
            Console.WriteLine("Concrete Decorator B operation performed");
        }

        void AddedBehavior()
        {
            Console.WriteLine("Decorator B doing other stuff");
        }
    }
}
