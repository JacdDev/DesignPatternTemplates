using System;

namespace DesignPatternTemplates
{
    /// <summary>
    /// Adapter Design Pattern Template
    /// </summary>
    class Main
    {
        /// <summary>
        /// Example of pattern use
        /// </summary> 
        public void Run()
        {
            Proxy proxy = new Proxy();
            proxy.Request();
        }
    }

    /// <summary>
    /// Subject abstract class
    /// Put here al the members the Proxy and the real subject must define
    /// </summary>
    public abstract class Subject
    {
        public abstract void Request();
    }

    /// <summary>
    /// RealSubject class
    /// This class will be managed by the proxy
    /// </summary>
    public class RealSubject : Subject
    {
        public override void Request()
        {
            Console.WriteLine("Real subject called");
        }
    }

    /// <summary>
    /// Proxy class
    /// This class acs as intermediate between your program and the real subject
    /// </summary>
    public class Proxy : Subject
    {
        private RealSubject realSubject;

        public override void Request()
        {
            if (realSubject == null)
            {
                realSubject = new RealSubject();
            }

            realSubject.Request();
        }
    }
}

